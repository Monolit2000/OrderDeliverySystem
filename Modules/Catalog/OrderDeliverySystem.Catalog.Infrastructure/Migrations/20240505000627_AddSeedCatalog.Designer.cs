// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderDeliverySystem.Catalog.Infrastructure.Persistence;

#nullable disable

namespace OrderDeliverySystem.Catalog.Infrastructure.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20240505000627_AddSeedCatalog")]
    partial class AddSeedCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderDeliverySystem.Catalog.Domain.Catalog.CatalogItem", b =>
                {
                    b.Property<Guid>("CatalogItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PictureFileName");

                    b.Property<string>("PictureUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PictureUri");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<DateTime>("TimeToItemExist")
                        .HasColumnType("datetime2");

                    b.HasKey("CatalogItemId");

                    b.ToTable("Catalog", "catalog");

                    b.HasData(
                        new
                        {
                            CatalogItemId = new Guid("6d47e656-e393-4a72-8385-21917bcf1d31"),
                            Description = "Classic cheese pizza with tomato and basil.",
                            Name = "Margherita Pizza",
                            PictureFileName = "margherita.jpg",
                            PictureUri = "/images/margherita.jpg",
                            Price = 9.99m,
                            ProductId = new Guid("8496cfd3-0937-44b6-9e8d-05e0a2ac41a7"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("d29d1efc-a9b9-442d-a582-251658d0bd92"),
                            Description = "Pizza with pepperoni slices.",
                            Name = "Pepperoni Pizza",
                            PictureFileName = "pepperoni.jpg",
                            PictureUri = "/images/pepperoni.jpg",
                            Price = 11.99m,
                            ProductId = new Guid("44d7968c-eeaa-489e-803d-5074fae0b302"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("4e37cf76-a39d-48aa-a050-1fbb096d71ff"),
                            Description = "Traditional Caesar salad with croutons and parmesan.",
                            Name = "Caesar Salad",
                            PictureFileName = "caesar.jpg",
                            PictureUri = "/images/caesar.jpg",
                            Price = 7.99m,
                            ProductId = new Guid("678d8c39-461d-4f38-87d5-c137b7f62ba1"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("abbd36bd-ff32-4809-b234-77923d10fd4b"),
                            Description = "Spaghetti with a rich Bolognese sauce.",
                            Name = "Spaghetti Bolognese",
                            PictureFileName = "spaghetti.jpg",
                            PictureUri = "/images/spaghetti.jpg",
                            Price = 12.99m,
                            ProductId = new Guid("678c30ce-682b-4902-aa35-33060cfe125b"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("82bc630c-1268-4820-8019-7e2bc9e3d61f"),
                            Description = "Chicken wings with spicy sauce.",
                            Name = "Chicken Wings",
                            PictureFileName = "wings.jpg",
                            PictureUri = "/images/wings.jpg",
                            Price = 8.99m,
                            ProductId = new Guid("0328fbd1-3174-40b8-9af0-099ca7daee44"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("c1e17ead-2736-429e-921e-ff4171d4d4a8"),
                            Description = "Classic cheeseburger with fries.",
                            Name = "Cheeseburger",
                            PictureFileName = "cheeseburger.jpg",
                            PictureUri = "/images/cheeseburger.jpg",
                            Price = 10.99m,
                            ProductId = new Guid("de4d0cca-5c1e-4bde-90b5-a7637978aa5a"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("c36276a9-7367-4aa3-9398-3415e32e90cd"),
                            Description = "Fried fish with chips.",
                            Name = "Fish and Chips",
                            PictureFileName = "fishchips.jpg",
                            PictureUri = "/images/fishchips.jpg",
                            Price = 13.99m,
                            ProductId = new Guid("4aafa4e8-be63-42d2-bbf2-144af36ca4f6"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("5dc70ff4-6cff-4b4a-831e-10a9ad98b91d"),
                            Description = "Traditional Italian dessert with mascarpone.",
                            Name = "Tiramisu",
                            PictureFileName = "tiramisu.jpg",
                            PictureUri = "/images/tiramisu.jpg",
                            Price = 6.99m,
                            ProductId = new Guid("08b36226-7e2e-461b-8c0b-db89f21ab751"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("1280a737-63f6-4466-8112-e70063620bde"),
                            Description = "Chicken with creamy Alfredo sauce.",
                            Name = "Chicken Alfredo",
                            PictureFileName = "alfredo.jpg",
                            PictureUri = "/images/alfredo.jpg",
                            Price = 14.99m,
                            ProductId = new Guid("c58a4bae-34ba-4aa6-b057-3c52e5097f6d"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("75e1ae4d-92ab-48f8-b1fa-cbd0ded2d36c"),
                            Description = "Classic Margarita cocktail.",
                            Name = "Margarita",
                            PictureFileName = "margarita.jpg",
                            PictureUri = "/images/margarita.jpg",
                            Price = 5.99m,
                            ProductId = new Guid("5e30dd83-b66f-4da4-9cc9-17d4d3f4d268"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("b07925b2-71b7-46f3-a944-5c2c4de6bde1"),
                            Description = "Refreshing Mojito with mint and lime.",
                            Name = "Mojito",
                            PictureFileName = "mojito.jpg",
                            PictureUri = "/images/mojito.jpg",
                            Price = 5.99m,
                            ProductId = new Guid("331c5e26-bc27-496f-88c6-e25a7fa30556"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("4c92cc44-f54b-4418-9fd1-a5406352e224"),
                            Description = "Tropical cocktail with pineapple and coconut.",
                            Name = "Pina Colada",
                            PictureFileName = "pinacolada.jpg",
                            PictureUri = "/images/pinacolada.jpg",
                            Price = 6.99m,
                            ProductId = new Guid("7d6556dc-134a-4501-8e47-ad6861675fd1"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("05eed828-315b-4208-8c64-630206254c9f"),
                            Description = "Coffee with steamed milk.",
                            Name = "Cappuccino",
                            PictureFileName = "cappuccino.jpg",
                            PictureUri = "/images/cappuccino.jpg",
                            Price = 4.99m,
                            ProductId = new Guid("f1955656-ed0e-4656-a6b4-3d46973ece92"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        },
                        new
                        {
                            CatalogItemId = new Guid("117d1453-54c5-4f10-a14d-8ae33cfc96fc"),
                            Description = "Strong coffee shot.",
                            Name = "Espresso",
                            PictureFileName = "espresso.jpg",
                            PictureUri = "/images/espresso.jpg",
                            Price = 2.99m,
                            ProductId = new Guid("aaf82609-e484-411a-8bd1-05fffbae7095"),
                            TimeToItemExist = new DateTime(2024, 5, 5, 3, 6, 26, 751, DateTimeKind.Local).AddTicks(6649)
                        });
                });

            modelBuilder.Entity("OrderDeliverySystem.Catalog.Domain.Catalog.CatalogType", b =>
                {
                    b.Property<Guid>("CatalogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatalogTypeId");

                    b.ToTable("CatalogTypes", "catalog");
                });

            modelBuilder.Entity("OrderDeliverySystem.Catalog.Domain.Catalog.Establishment", b =>
                {
                    b.Property<Guid>("EstablishmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstablishmentId");

                    b.ToTable("Establishments", "catalog");
                });
#pragma warning restore 612, 618
        }
    }
}
